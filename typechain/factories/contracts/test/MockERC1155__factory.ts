/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  MockERC1155,
  MockERC1155Interface,
} from "../../../contracts/test/MockERC1155";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "uri_",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    name: "ApprovalForAll",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256[]",
        name: "ids",
        type: "uint256[]",
      },
      {
        indexed: false,
        internalType: "uint256[]",
        name: "values",
        type: "uint256[]",
      },
    ],
    name: "TransferBatch",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "TransferSingle",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "string",
        name: "value",
        type: "string",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
    ],
    name: "URI",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "accounts",
        type: "address[]",
      },
      {
        internalType: "uint256[]",
        name: "ids",
        type: "uint256[]",
      },
    ],
    name: "balanceOfBatch",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
    ],
    name: "isApprovedForAll",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256[]",
        name: "ids",
        type: "uint256[]",
      },
      {
        internalType: "uint256[]",
        name: "amounts",
        type: "uint256[]",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "safeBatchTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "safeTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    name: "setApprovalForAll",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "uri",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b50604051620016e2380380620016e2833981016040819052620000349162000070565b80620000408162000048565b5050620002a0565b6002620000568282620001d4565b5050565b634e487b7160e01b600052604160045260246000fd5b600060208083850312156200008457600080fd5b82516001600160401b03808211156200009c57600080fd5b818501915085601f830112620000b157600080fd5b815181811115620000c657620000c66200005a565b604051601f8201601f19908116603f01168101908382118183101715620000f157620000f16200005a565b8160405282815288868487010111156200010a57600080fd5b600093505b828410156200012e57848401860151818501870152928501926200010f565b600086848301015280965050505050505092915050565b600181811c908216806200015a57607f821691505b6020821081036200017b57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620001cf57600081815260208120601f850160051c81016020861015620001aa5750805b601f850160051c820191505b81811015620001cb57828155600101620001b6565b5050505b505050565b81516001600160401b03811115620001f057620001f06200005a565b620002088162000201845462000145565b8462000181565b602080601f831160018114620002405760008415620002275750858301515b600019600386901b1c1916600185901b178555620001cb565b600085815260208120601f198616915b82811015620002715788860151825594840194600190910190840162000250565b5085821015620002905787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b61143280620002b06000396000f3fe608060405234801561001057600080fd5b50600436106100925760003560e01c80632eb2c2d6116100665780632eb2c2d61461012c5780634e1273f414610141578063a22cb46514610161578063e985e9c514610174578063f242432a146101b057600080fd5b8062fdd58e1461009757806301ffc9a7146100bd5780630e89341c146100e0578063156e29f614610119575b600080fd5b6100aa6100a5366004610c73565b6101c3565b6040519081526020015b60405180910390f35b6100d06100cb366004610cb6565b61025d565b60405190151581526020016100b4565b61010c6100ee366004610cda565b5060408051808201909152600381526275726960e81b602082015290565b6040516100b49190610d39565b6100d0610127366004610d4c565b6102ad565b61013f61013a366004610ecb565b6102d4565b005b61015461014f366004610f75565b61036b565b6040516100b4919061107b565b61013f61016f36600461108e565b610495565b6100d06101823660046110ca565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b61013f6101be3660046110fd565b61056b565b60006001600160a01b0383166102345760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60448201526a65726f206164647265737360a81b60648201526084015b60405180910390fd5b506000818152602081815260408083206001600160a01b03861684529091529020545b92915050565b60006001600160e01b03198216636cdb3d1360e11b148061028e57506001600160e01b031982166303a24d0760e21b145b8061025757506301ffc9a760e01b6001600160e01b0319831614610257565b60006102ca848484604051806020016040528060008152506105f2565b5060019392505050565b6001600160a01b0385163314806102f057506102f08533610182565b6103575760405162461bcd60e51b815260206004820152603260248201527f455243313135353a207472616e736665722063616c6c6572206973206e6f74206044820152711bdddb995c881b9bdc88185c1c1c9bdd995960721b606482015260840161022b565b61036485858585856106fc565b5050505050565b606081518351146103d05760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b606482015260840161022b565b6000835167ffffffffffffffff8111156103ec576103ec610d7f565b604051908082528060200260200182016040528015610415578160200160208202803683370190505b50905060005b845181101561048d5761046085828151811061043957610439611162565b602002602001015185838151811061045357610453611162565b60200260200101516101c3565b82828151811061047257610472611162565b60209081029190910101526104868161118e565b905061041b565b509392505050565b6001600160a01b03821633036104ff5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b606482015260840161022b565b3360008181526001602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6001600160a01b03851633148061058757506105878533610182565b6105e55760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201526808185c1c1c9bdd995960ba1b606482015260840161022b565b61036485858585856108d9565b6001600160a01b0384166106525760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b606482015260840161022b565b3361066c81600087610663886109f6565b610364886109f6565b6000848152602081815260408083206001600160a01b03891684529091528120805485929061069c9084906111a7565b909155505060408051858152602081018590526001600160a01b0380881692600092918516917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a461036481600087878787610a41565b815183511461075e5760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b606482015260840161022b565b6001600160a01b0384166107845760405162461bcd60e51b815260040161022b906111ba565b3360005b845181101561086b5760008582815181106107a5576107a5611162565b6020026020010151905060008583815181106107c3576107c3611162565b602090810291909101810151600084815280835260408082206001600160a01b038e1683529093529190912054909150818110156108135760405162461bcd60e51b815260040161022b906111ff565b6000838152602081815260408083206001600160a01b038e8116855292528083208585039055908b168252812080548492906108509084906111a7565b92505081905550505050806108649061118e565b9050610788565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516108bb929190611249565b60405180910390a46108d1818787878787610b9c565b505050505050565b6001600160a01b0384166108ff5760405162461bcd60e51b815260040161022b906111ba565b3361090f818787610663886109f6565b6000848152602081815260408083206001600160a01b038a168452909152902054838110156109505760405162461bcd60e51b815260040161022b906111ff565b6000858152602081815260408083206001600160a01b038b811685529252808320878503905590881682528120805486929061098d9084906111a7565b909155505060408051868152602081018690526001600160a01b03808916928a821692918616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46109ed828888888888610a41565b50505050505050565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110610a3057610a30611162565b602090810291909101015292915050565b6001600160a01b0384163b156108d15760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e6190610a859089908990889088908890600401611277565b6020604051808303816000875af1925050508015610ac0575060408051601f3d908101601f19168201909252610abd918101906112bc565b60015b610b6c57610acc6112d9565b806308c379a003610b055750610ae06112f5565b80610aeb5750610b07565b8060405162461bcd60e51b815260040161022b9190610d39565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e20455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b606482015260840161022b565b6001600160e01b0319811663f23a6e6160e01b146109ed5760405162461bcd60e51b815260040161022b9061137f565b6001600160a01b0384163b156108d15760405163bc197c8160e01b81526001600160a01b0385169063bc197c8190610be090899089908890889088906004016113c7565b6020604051808303816000875af1925050508015610c1b575060408051601f3d908101601f19168201909252610c18918101906112bc565b60015b610c2757610acc6112d9565b6001600160e01b0319811663bc197c8160e01b146109ed5760405162461bcd60e51b815260040161022b9061137f565b80356001600160a01b0381168114610c6e57600080fd5b919050565b60008060408385031215610c8657600080fd5b610c8f83610c57565b946020939093013593505050565b6001600160e01b031981168114610cb357600080fd5b50565b600060208284031215610cc857600080fd5b8135610cd381610c9d565b9392505050565b600060208284031215610cec57600080fd5b5035919050565b6000815180845260005b81811015610d1957602081850181015186830182015201610cfd565b506000602082860101526020601f19601f83011685010191505092915050565b602081526000610cd36020830184610cf3565b600080600060608486031215610d6157600080fd5b610d6a84610c57565b95602085013595506040909401359392505050565b634e487b7160e01b600052604160045260246000fd5b601f8201601f1916810167ffffffffffffffff81118282101715610dbb57610dbb610d7f565b6040525050565b600067ffffffffffffffff821115610ddc57610ddc610d7f565b5060051b60200190565b600082601f830112610df757600080fd5b81356020610e0482610dc2565b604051610e118282610d95565b83815260059390931b8501820192828101915086841115610e3157600080fd5b8286015b84811015610e4c5780358352918301918301610e35565b509695505050505050565b600082601f830112610e6857600080fd5b813567ffffffffffffffff811115610e8257610e82610d7f565b604051610e99601f8301601f191660200182610d95565b818152846020838601011115610eae57600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a08688031215610ee357600080fd5b610eec86610c57565b9450610efa60208701610c57565b9350604086013567ffffffffffffffff80821115610f1757600080fd5b610f2389838a01610de6565b94506060880135915080821115610f3957600080fd5b610f4589838a01610de6565b93506080880135915080821115610f5b57600080fd5b50610f6888828901610e57565b9150509295509295909350565b60008060408385031215610f8857600080fd5b823567ffffffffffffffff80821115610fa057600080fd5b818501915085601f830112610fb457600080fd5b81356020610fc182610dc2565b604051610fce8282610d95565b83815260059390931b8501820192828101915089841115610fee57600080fd5b948201945b838610156110135761100486610c57565b82529482019490820190610ff3565b9650508601359250508082111561102957600080fd5b5061103685828601610de6565b9150509250929050565b600081518084526020808501945080840160005b8381101561107057815187529582019590820190600101611054565b509495945050505050565b602081526000610cd36020830184611040565b600080604083850312156110a157600080fd5b6110aa83610c57565b9150602083013580151581146110bf57600080fd5b809150509250929050565b600080604083850312156110dd57600080fd5b6110e683610c57565b91506110f460208401610c57565b90509250929050565b600080600080600060a0868803121561111557600080fd5b61111e86610c57565b945061112c60208701610c57565b93506040860135925060608601359150608086013567ffffffffffffffff81111561115657600080fd5b610f6888828901610e57565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016111a0576111a0611178565b5060010190565b8082018082111561025757610257611178565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b60408152600061125c6040830185611040565b828103602084015261126e8185611040565b95945050505050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a0608082018190526000906112b190830184610cf3565b979650505050505050565b6000602082840312156112ce57600080fd5b8151610cd381610c9d565b600060033d11156112f25760046000803e5060005160e01c5b90565b600060443d10156113035790565b6040516003193d81016004833e81513d67ffffffffffffffff816024840111818411171561133357505050505090565b828501915081518181111561134b5750505050505090565b843d87010160208285010111156113655750505050505090565b61137460208286010187610d95565b509095945050505050565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b6001600160a01b0386811682528516602082015260a0604082018190526000906113f390830186611040565b82810360608401526114058186611040565b905082810360808401526114198185610cf3565b9897505050505050505056fea164736f6c6343000812000a";

type MockERC1155ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockERC1155ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockERC1155__factory extends ContractFactory {
  constructor(...args: MockERC1155ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    uri_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MockERC1155> {
    return super.deploy(uri_, overrides || {}) as Promise<MockERC1155>;
  }
  override getDeployTransaction(
    uri_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(uri_, overrides || {});
  }
  override attach(address: string): MockERC1155 {
    return super.attach(address) as MockERC1155;
  }
  override connect(signer: Signer): MockERC1155__factory {
    return super.connect(signer) as MockERC1155__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockERC1155Interface {
    return new utils.Interface(_abi) as MockERC1155Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockERC1155 {
    return new Contract(address, _abi, signerOrProvider) as MockERC1155;
  }
}
