/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  MockERC20Reentrancy,
  MockERC20ReentrancyInterface,
} from "../../../contracts/test/MockERC20Reentrancy";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "subtractedValue",
        type: "uint256",
      },
    ],
    name: "decreaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "addedValue",
        type: "uint256",
      },
    ],
    name: "increaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IARCDVestingVault",
        name: "_vesting",
        type: "address",
      },
    ],
    name: "setVesting",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "vesting",
    outputs: [
      {
        internalType: "contract IARCDVestingVault",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b506040518060400160405280600a81526020016926b7b1b5a2a92199182960b11b8152506040518060400160405280600781526020016626a2a92199182960c91b815250816003908162000066919062000135565b50600462000075828262000135565b5050600580546001600160a01b031916331790555062000201565b634e487b7160e01b600052604160045260246000fd5b600181811c90821680620000bb57607f821691505b602082108103620000dc57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200013057600081815260208120601f850160051c810160208610156200010b5750805b601f850160051c820191505b818110156200012c5782815560010162000117565b5050505b505050565b81516001600160401b0381111562000151576200015162000090565b6200016981620001628454620000a6565b84620000e2565b602080601f831160018114620001a15760008415620001885750858301515b600019600386901b1c1916600185901b1785556200012c565b600085815260208120601f198616915b82811015620001d257888601518255948401946001909101908401620001b1565b5085821015620001f15787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b610b1580620002116000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c806344c63eec1161008c57806395d89b411161006657806395d89b41146101f3578063a457c2d7146101fb578063a9059cbb1461020e578063dd62ed3e1461022157600080fd5b806344c63eec1461018c5780636f6ff3bc146101b757806370a08231146101ca57600080fd5b806323b872dd116100c857806323b872dd14610142578063313ce56714610155578063395093511461016457806340c10f191461017757600080fd5b806306fdde03146100ef578063095ea7b31461010d57806318160ddd14610130575b600080fd5b6100f761025a565b604051610104919061097d565b60405180910390f35b61012061011b3660046109e3565b6102ec565b6040519015158152602001610104565b6002545b604051908152602001610104565b610120610150366004610a0f565b610303565b60405160128152602001610104565b6101206101723660046109e3565b6103b2565b61018a6101853660046109e3565b6103ee565b005b60065461019f906001600160a01b031681565b6040516001600160a01b039091168152602001610104565b61018a6101c5366004610a50565b6103fc565b6101346101d8366004610a50565b6001600160a01b031660009081526020819052604090205490565b6100f7610465565b6101206102093660046109e3565b610474565b61012061021c3660046109e3565b61050d565b61013461022f366004610a74565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b60606003805461026990610aad565b80601f016020809104026020016040519081016040528092919081815260200182805461029590610aad565b80156102e25780601f106102b7576101008083540402835291602001916102e2565b820191906000526020600020905b8154815290600101906020018083116102c557829003601f168201915b5050505050905090565b60006102f933848461051a565b5060015b92915050565b600061031084848461063e565b6001600160a01b03841660009081526001602090815260408083203384529091529020548281101561039a5760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b60648201526084015b60405180910390fd5b6103a7853385840361051a565b506001949350505050565b3360008181526001602090815260408083206001600160a01b038716845290915281205490916102f99185906103e9908690610ae7565b61051a565b6103f88282610818565b5050565b6005546001600160a01b031633146104435760405162461bcd60e51b815260206004820152600a60248201526937b7363c9037bbb732b960b11b6044820152606401610391565b600680546001600160a01b0319166001600160a01b0392909216919091179055565b60606004805461026990610aad565b3360009081526001602090815260408083206001600160a01b0386168452909152812054828110156104f65760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610391565b610503338585840361051a565b5060019392505050565b60006102f933848461063e565b6001600160a01b03831661057c5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610391565b6001600160a01b0382166105dd5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610391565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b0383166106a25760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610391565b6001600160a01b0382166107045760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610391565b6001600160a01b0383166000908152602081905260409020548181101561077c5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610391565b6001600160a01b038085166000908152602081905260408082208585039055918516815290812080548492906107b3908490610ae7565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516107ff91815260200190565b60405180910390a3610812848484610904565b50505050565b6001600160a01b03821661086e5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610391565b80600260008282546108809190610ae7565b90915550506001600160a01b038216600090815260208190526040812080548392906108ad908490610ae7565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a36103f860008383610904565b505050565b6006546001600160a01b03908116908416036108ff5760065460405163379607f560e01b8152600160048201526001600160a01b039091169063379607f590602401600060405180830381600087803b15801561096057600080fd5b505af1158015610974573d6000803e3d6000fd5b50505050505050565b600060208083528351808285015260005b818110156109aa5785810183015185820160400152820161098e565b506000604082860101526040601f19601f8301168501019250505092915050565b6001600160a01b03811681146109e057600080fd5b50565b600080604083850312156109f657600080fd5b8235610a01816109cb565b946020939093013593505050565b600080600060608486031215610a2457600080fd5b8335610a2f816109cb565b92506020840135610a3f816109cb565b929592945050506040919091013590565b600060208284031215610a6257600080fd5b8135610a6d816109cb565b9392505050565b60008060408385031215610a8757600080fd5b8235610a92816109cb565b91506020830135610aa2816109cb565b809150509250929050565b600181811c90821680610ac157607f821691505b602082108103610ae157634e487b7160e01b600052602260045260246000fd5b50919050565b808201808211156102fd57634e487b7160e01b600052601160045260246000fdfea164736f6c6343000812000a";

type MockERC20ReentrancyConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockERC20ReentrancyConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockERC20Reentrancy__factory extends ContractFactory {
  constructor(...args: MockERC20ReentrancyConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MockERC20Reentrancy> {
    return super.deploy(overrides || {}) as Promise<MockERC20Reentrancy>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MockERC20Reentrancy {
    return super.attach(address) as MockERC20Reentrancy;
  }
  override connect(signer: Signer): MockERC20Reentrancy__factory {
    return super.connect(signer) as MockERC20Reentrancy__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockERC20ReentrancyInterface {
    return new utils.Interface(_abi) as MockERC20ReentrancyInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockERC20Reentrancy {
    return new Contract(address, _abi, signerOrProvider) as MockERC20Reentrancy;
  }
}
