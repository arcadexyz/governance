/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BytesLike,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../../common";
import type {
  MerkleRewards,
  MerkleRewardsInterface,
} from "../../../../../../contracts/external/council/libraries/MerkleRewards.sol/MerkleRewards";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_rewardsRoot",
        type: "bytes32",
      },
      {
        internalType: "contract IERC20",
        name: "_token",
        type: "address",
      },
      {
        internalType: "contract ILockingVault",
        name: "_lockingVault",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "totalGrant",
        type: "uint256",
      },
      {
        internalType: "bytes32[]",
        name: "merkleProof",
        type: "bytes32[]",
      },
      {
        internalType: "address",
        name: "destination",
        type: "address",
      },
    ],
    name: "claim",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "delegate",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "totalGrant",
        type: "uint256",
      },
      {
        internalType: "bytes32[]",
        name: "merkleProof",
        type: "bytes32[]",
      },
      {
        internalType: "address",
        name: "destination",
        type: "address",
      },
    ],
    name: "claimAndDelegate",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "claimed",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "lockingVault",
    outputs: [
      {
        internalType: "contract ILockingVault",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "rewardsRoot",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "token",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60a060405234801561001057600080fd5b5060405161082c38038061082c83398101604081905261002f916100ed565b60008390556001600160a01b038281166080819052600280546001600160a01b031916928416928317905560405163095ea7b360e01b81526004810192909252600019602483015284918491849163095ea7b3906044016020604051808303816000875af11580156100a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100c99190610130565b50505050505050610159565b6001600160a01b03811681146100ea57600080fd5b50565b60008060006060848603121561010257600080fd5b835192506020840151610114816100d5565b6040850151909250610125816100d5565b809150509250925092565b60006020828403121561014257600080fd5b8151801515811461015257600080fd5b9392505050565b6080516106b261017a6000396000818160fb015261018101526106b26000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c806309ed28f1146100675780630a33e8c21461007c578063217863b71461008f578063c884ef83146100ab578063d2a04345146100cb578063fc0c546a146100f6575b600080fd5b61007a610075366004610524565b61011d565b005b61007a61008a36600461058c565b6101f6565b61009860005481565b6040519081526020015b60405180910390f35b6100986100b9366004610603565b60016020526000908152604090205481565b6002546100de906001600160a01b031681565b6040516001600160a01b0390911681526020016100a2565b6100de7f000000000000000000000000000000000000000000000000000000000000000081565b61015b85858585808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506102fc92505050565b60405163a9059cbb60e01b81526001600160a01b038281166004830152602482018790527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303816000875af11580156101ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101ee9190610625565b505050505050565b6001600160a01b0385166102485760405162461bcd60e51b81526020600482015260146024820152732d32b9379030b23239103232b632b3b0ba34b7b760611b60448201526064015b60405180910390fd5b61028686858585808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506102fc92505050565b600254604051633d14d1b760e21b81526001600160a01b0383811660048301526024820189905287811660448301529091169063f45346dc90606401600060405180830381600087803b1580156102dc57600080fd5b505af11580156102f0573d6000803e3d6000fd5b50505050505050505050565b6040516bffffffffffffffffffffffff193360601b16602082015260348101839052600090605401604051602081830303815290604052805190602001209050610349826000548361040d565b6103855760405162461bcd60e51b815260206004820152600d60248201526c24b73b30b634b210283937b7b360991b604482015260640161023f565b3360009081526001602052604090205483906103a290869061065d565b11156103e35760405162461bcd60e51b815260206004820152601060248201526f086d8c2d2dacac840e8dede40daeac6d60831b604482015260640161023f565b336000908152600160205260408120805486929061040290849061065d565b909155505050505050565b600081815b85518110156104b157600086828151811061042f5761042f610676565b6020026020010151905080831161047157604080516020810185905290810182905260600160405160208183030381529060405280519060200120925061049e565b60408051602081018390529081018490526060016040516020818303038152906040528051906020012092505b50806104a98161068c565b915050610412565b509092149392505050565b60008083601f8401126104ce57600080fd5b50813567ffffffffffffffff8111156104e657600080fd5b6020830191508360208260051b850101111561050157600080fd5b9250929050565b80356001600160a01b038116811461051f57600080fd5b919050565b60008060008060006080868803121561053c57600080fd5b8535945060208601359350604086013567ffffffffffffffff81111561056157600080fd5b61056d888289016104bc565b9094509250610580905060608701610508565b90509295509295909350565b60008060008060008060a087890312156105a557600080fd5b863595506105b560208801610508565b945060408701359350606087013567ffffffffffffffff8111156105d857600080fd5b6105e489828a016104bc565b90945092506105f7905060808801610508565b90509295509295509295565b60006020828403121561061557600080fd5b61061e82610508565b9392505050565b60006020828403121561063757600080fd5b8151801515811461061e57600080fd5b634e487b7160e01b600052601160045260246000fd5b8082018082111561067057610670610647565b92915050565b634e487b7160e01b600052603260045260246000fd5b60006001820161069e5761069e610647565b506001019056fea164736f6c6343000812000a";

type MerkleRewardsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MerkleRewardsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MerkleRewards__factory extends ContractFactory {
  constructor(...args: MerkleRewardsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _rewardsRoot: PromiseOrValue<BytesLike>,
    _token: PromiseOrValue<string>,
    _lockingVault: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MerkleRewards> {
    return super.deploy(
      _rewardsRoot,
      _token,
      _lockingVault,
      overrides || {}
    ) as Promise<MerkleRewards>;
  }
  override getDeployTransaction(
    _rewardsRoot: PromiseOrValue<BytesLike>,
    _token: PromiseOrValue<string>,
    _lockingVault: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _rewardsRoot,
      _token,
      _lockingVault,
      overrides || {}
    );
  }
  override attach(address: string): MerkleRewards {
    return super.attach(address) as MerkleRewards;
  }
  override connect(signer: Signer): MerkleRewards__factory {
    return super.connect(signer) as MerkleRewards__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MerkleRewardsInterface {
    return new utils.Interface(_abi) as MerkleRewardsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MerkleRewards {
    return new Contract(address, _abi, signerOrProvider) as MerkleRewards;
  }
}
