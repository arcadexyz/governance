/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  BadgeDescriptor,
  BadgeDescriptorInterface,
} from "../../../contracts/nft/BadgeDescriptor";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "_baseURI",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "caller",
        type: "address",
      },
      {
        indexed: false,
        internalType: "string",
        name: "baseURI",
        type: "string",
      },
    ],
    name: "SetBaseURI",
    type: "event",
  },
  {
    inputs: [],
    name: "baseURI",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "newBaseURI",
        type: "string",
      },
    ],
    name: "setBaseURI",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "tokenURI",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162000b9b38038062000b9b8339810160408190526200003491620000bb565b6200003f3362000055565b60016200004d82826200021f565b5050620002eb565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b634e487b7160e01b600052604160045260246000fd5b60006020808385031215620000cf57600080fd5b82516001600160401b0380821115620000e757600080fd5b818501915085601f830112620000fc57600080fd5b815181811115620001115762000111620000a5565b604051601f8201601f19908116603f011681019083821181831017156200013c576200013c620000a5565b8160405282815288868487010111156200015557600080fd5b600093505b828410156200017957848401860151818501870152928501926200015a565b600086848301015280965050505050505092915050565b600181811c90821680620001a557607f821691505b602082108103620001c657634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200021a57600081815260208120601f850160051c81016020861015620001f55750805b601f850160051c820191505b81811015620002165782815560010162000201565b5050505b505050565b81516001600160401b038111156200023b576200023b620000a5565b62000253816200024c845462000190565b84620001cc565b602080601f8311600181146200028b5760008415620002725750858301515b600019600386901b1c1916600185901b17855562000216565b600085815260208120601f198616915b82811015620002bc578886015182559484019460019091019084016200029b565b5085821015620002db5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6108a080620002fb6000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c806355f804b3146100675780636c0360eb1461007c578063715018a61461009a5780638da5cb5b146100a2578063c87b56dd146100bd578063f2fde38b146100d0575b600080fd5b61007a610075366004610494565b6100e3565b005b610084610167565b6040516100919190610569565b60405180910390f35b61007a6101f5565b6000546040516001600160a01b039091168152602001610091565b6100846100cb36600461059c565b61022b565b61007a6100de3660046105b5565b61028a565b6000546001600160a01b031633146101165760405162461bcd60e51b815260040161010d906105e5565b60405180910390fd5b600161012282826106a3565b50336001600160a01b03167fe7e6d2e694e925d1996aaef24328f8c8b026ccc5dd0a1c2397509d5d31de8cbb8260405161015c9190610569565b60405180910390a250565b600180546101749061061a565b80601f01602080910402602001604051908101604052809291908181526020018280546101a09061061a565b80156101ed5780601f106101c2576101008083540402835291602001916101ed565b820191906000526020600020905b8154815290600101906020018083116101d057829003601f168201915b505050505081565b6000546001600160a01b0316331461021f5760405162461bcd60e51b815260040161010d906105e5565b6102296000610325565b565b606060006001805461023c9061061a565b9050116102585760405180602001604052806000815250610284565b600161026383610375565b604051602001610274929190610763565b6040516020818303038152906040525b92915050565b6000546001600160a01b031633146102b45760405162461bcd60e51b815260040161010d906105e5565b6001600160a01b0381166103195760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161010d565b61032281610325565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60608160000361039c5750506040805180820190915260018152600360fc1b602082015290565b8160005b81156103c657806103b081610800565b91506103bf9050600a8361082f565b91506103a0565b60008167ffffffffffffffff8111156103e1576103e161047e565b6040519080825280601f01601f19166020018201604052801561040b576020820181803683370190505b5090505b841561047657610420600183610843565b915061042d600a86610856565b61043890603061086a565b60f81b81838151811061044d5761044d61087d565b60200101906001600160f81b031916908160001a90535061046f600a8661082f565b945061040f565b949350505050565b634e487b7160e01b600052604160045260246000fd5b6000602082840312156104a657600080fd5b813567ffffffffffffffff808211156104be57600080fd5b818401915084601f8301126104d257600080fd5b8135818111156104e4576104e461047e565b604051601f8201601f19908116603f0116810190838211818310171561050c5761050c61047e565b8160405282815287602084870101111561052557600080fd5b826020860160208301376000928101602001929092525095945050505050565b60005b83811015610560578181015183820152602001610548565b50506000910152565b6020815260008251806020840152610588816040850160208701610545565b601f01601f19169190910160400192915050565b6000602082840312156105ae57600080fd5b5035919050565b6000602082840312156105c757600080fd5b81356001600160a01b03811681146105de57600080fd5b9392505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600181811c9082168061062e57607f821691505b60208210810361064e57634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561069e57600081815260208120601f850160051c8101602086101561067b5750805b601f850160051c820191505b8181101561069a57828155600101610687565b5050505b505050565b815167ffffffffffffffff8111156106bd576106bd61047e565b6106d1816106cb845461061a565b84610654565b602080601f83116001811461070657600084156106ee5750858301515b600019600386901b1c1916600185901b17855561069a565b600085815260208120601f198616915b8281101561073557888601518255948401946001909101908401610716565b50858210156107535787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60008084546107718161061a565b60018281168015610789576001811461079e576107cd565b60ff19841687528215158302870194506107cd565b8860005260208060002060005b858110156107c45781548a8201529084019082016107ab565b50505082870194505b5050505083516107e1818360208801610545565b01949350505050565b634e487b7160e01b600052601160045260246000fd5b600060018201610812576108126107ea565b5060010190565b634e487b7160e01b600052601260045260246000fd5b60008261083e5761083e610819565b500490565b81810381811115610284576102846107ea565b60008261086557610865610819565b500690565b80820180821115610284576102846107ea565b634e487b7160e01b600052603260045260246000fdfea164736f6c6343000812000a";

type BadgeDescriptorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BadgeDescriptorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class BadgeDescriptor__factory extends ContractFactory {
  constructor(...args: BadgeDescriptorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _baseURI: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<BadgeDescriptor> {
    return super.deploy(_baseURI, overrides || {}) as Promise<BadgeDescriptor>;
  }
  override getDeployTransaction(
    _baseURI: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_baseURI, overrides || {});
  }
  override attach(address: string): BadgeDescriptor {
    return super.attach(address) as BadgeDescriptor;
  }
  override connect(signer: Signer): BadgeDescriptor__factory {
    return super.connect(signer) as BadgeDescriptor__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BadgeDescriptorInterface {
    return new utils.Interface(_abi) as BadgeDescriptorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): BadgeDescriptor {
    return new Contract(address, _abi, signerOrProvider) as BadgeDescriptor;
  }
}
